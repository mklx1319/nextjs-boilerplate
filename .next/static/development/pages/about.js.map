{"version":3,"file":"static/development/pages/about.js","sources":["webpack:///./components/App.js","webpack:///delegated ./node_modules/react/index.js from dll-reference dll_831a3634f66cb1dada0c","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./pages/about.js","webpack:///external \"dll_831a3634f66cb1dada0c\""],"sourcesContent":["export default ({ children }) => <main>{children}</main>\n","module.exports = (__webpack_require__(/*! dll-reference dll_831a3634f66cb1dada0c */ \"dll-reference dll_831a3634f66cb1dada0c\"))(\"./node_modules/react/index.js\");","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import React from 'react'\nimport App from '../components/App'\n\nexport default () => (\n  <App>\n    <article>\n      <h1>The Idea Behind This Example</h1>\n      <p>\n        <a href=\"https://www.apollographql.com/client/\">Apollo</a> is a GraphQL client that allows\n        you to easily query the exact data you need from a GraphQL server. In addition to fetching\n        and mutating data, Apollo analyzes your queries and their results to construct a client-side\n        cache of your data, which is kept up to date as further queries and mutations are run,\n        fetching more results from the server.\n      </p>\n      <p>\n        In this simple example, we integrate Apollo seamlessly with{' '}\n        <a href=\"https://github.com/zeit/next.js\">Next</a> by wrapping our pages inside a{' '}\n        <a href=\"https://facebook.github.io/react/docs/higher-order-components.html\">\n          higher-order component (HOC)\n        </a>\n        . Using the HOC pattern we're able to pass down a central store of query result data created\n        by Apollo into our React component hierarchy defined inside each page of our Next\n        application.\n      </p>\n      <p>\n        On initial page load, while on the server and inside getInitialProps, we invoke the Apollo\n        method,{' '}\n        <a href=\"https://www.apollographql.com/docs/react/features/server-side-rendering.html#getDataFromTree\">\n          getDataFromTree\n        </a>\n        . This method returns a promise; at the point in which the promise resolves, our Apollo\n        Client store is completely initialized.\n      </p>\n      <p>\n        This example relies on <a href=\"http://graph.cool\">graph.cool</a> for its GraphQL backend.\n      </p>\n    </article>\n  </App>\n)\n","module.exports = dll_831a3634f66cb1dada0c;"],"mappings":";;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;;;;A","sourceRoot":""}